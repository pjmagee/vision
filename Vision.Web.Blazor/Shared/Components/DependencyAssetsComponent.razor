@inherits OwningComponentBase

<BSTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>@nameof(AssetDependencyDto.Asset)</th>
            <th>@nameof(AssetDependencyDto.Version)</th>
            <th>@nameof(AssetDependencyDto.Repository)</th>
            <th>Is latest</th>
        </tr>
    </thead>
    <tbody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td><a href="@($"/data/vcs/{item.VcsId}/repositories/{item.RepositoryId}/assets/{item.AssetId}")">@item.Asset</a></td>
                    <td><a href="@($"/data/dependencies/{item.DependencyId}/versions/{item.DependencyVersionId}")">@item.Version</a></td>
                    <td><a href="@($"/data/vcs/{item.VcsId}/repositories/{item.RepositoryId}")">@item.Repository</a></td>
                    <td>@item.IsLatest.ToYesNo()</td>
                </tr>
            }

            @if (Items.Count == 0)
            {
                <tr>
                    <td colspan="4">None found.</td>
                </tr>
            }
        }
        else
        {
            <LoaderComponent />
        }
    </tbody>
</BSTable>

<PagerComponent Items="Items" Page="@(async(p) => await PageAsync(p))" />

@code
{
    [Parameter] public Guid? DependencyId { get; set; }

    IAssetDependencyService Service { get; set; }
    IPaginatedList<AssetDependencyDto> Items { get; set; }

    protected override void OnInitialized()
    {
        Service = (IAssetDependencyService)ScopedServices.GetService(typeof(IAssetDependencyService));
    }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(1);
    }

    async Task PageAsync(int page)
    {
        if (DependencyId.HasValue)
        {
            Items = await Service.GetByDependencyIdAsync(DependencyId.Value, page);
            StateHasChanged();
        }
    }
}
