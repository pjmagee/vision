<ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

    <a class="sidebar-brand d-flex align-items-center justify-content-center" href="/">
        <div class="sidebar-brand-icon rotate-n-15">
            <i class="fas fa-eye"></i>
        </div>
        <div class="sidebar-brand-text mx-3">Vision</div>
    </a>

    <hr class="sidebar-divider my-0">

    @foreach (var item in Navigation.NavMenuItems)
    {
        var selected = item;

        if (item.Type == NavMenuItemType.Data)
        {
            if (item.Children.Count == 0)
            {
                <li class="nav-item @ActiveClass(item)">
                    <NavLink class="nav-link" href="@item.Route" Match="@item.Match">
                        <i class="@item.Icon"></i>
                        <span>@item.Name</span>
                    </NavLink>
                </li>
            }
            else
            {
                <li class="nav-item">
                    <a class="nav-link collapsed" href="" data-toggle="collapse" data-target="#@item.Name" aria-expanded="true" aria-controls="@item.Name">
                        <i class="@item.Icon"></i>
                        <span>@item.Name</span>
                    </a>
                    <div id="@item.Name" class="collapse" aria-labelledby="heading@(item.Name)" data-parent="#accordionSidebar">
                        <div class="bg-white py-2 collapse-inner rounded">
                            @foreach (var childItem in item.Children)
                            {
                                if (childItem.Type == NavMenuItemType.Seperator)
                                {
                                    <h6 class="collapse-header">@childItem.Name:</h6>
                                }
                                else
                                {
                                    <NavLink class="collapse-item" ActiveClass="active" href="@childItem.Route">
                                        @childItem.Name
                                    </NavLink>
                                }
                            }
                        </div>
                    </div>
                </li>
            }
        }

        if (item.Type == NavMenuItemType.Seperator)
        {
            <hr class="sidebar-divider">
            <div class="sidebar-heading">@item.Name</div>
        }
    }

    <hr class="sidebar-divider d-none d-md-block">

    <div class="text-center d-none d-md-inline">
        <button class="rounded-circle border-0" id="sidebarToggle"></button>
    </div>
</ul>

@code
{
    string ActiveClass(NavMenuItem item)
    {
        return item.IsActive ? " active" : string.Empty;
    }

    [Inject] NavigationService Navigation { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] IJSRuntime Runtime { get; set; }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    ~MenuComponent()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {

    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Runtime.InvokeAsync<object>("register");
    }
}