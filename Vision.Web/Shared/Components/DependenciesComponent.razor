@inherits OwningComponentBase

<div class="form-inline mb-4">
    <BSFormLabel Class="my-1 mr-2">Kind</BSFormLabel>
    <select @onchange="@DropDownFilterAsync" class="form-control my-1 mr-sm-2">
        <option>Any...</option>
        @foreach (var kind in AppHelper.DependencyKinds)
        {
            <option value="@kind">@kind.GetName()</option>
        }
    </select>
    <input class="form-control mr-sm-2" @bind-Value="@Search" @bind-Value:event="oninput" type="text" />
    <button type="button" class="btn btn-primary" @onclick="@(async() => await PageAsync(Items.PageIndex))">Search</button>
</div>

<BSTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>Kind</th>
            <th>Name</th>
            <th>Assets</th>
            <th>Versions</th>
        </tr>
    </thead>
    <tbody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td class="@item.Kind.GetIconClass() text-center">@SvgService.GetSvg(item.Kind)</td>
                    <td><a href="@($"/data/dependencies/{item.DependencyId}")">@item.Name</a></td>
                    <td>@item.Assets</td>
                    <td>@item.Versions</td>
                </tr>
            }

            @if (Items.Count == 0)
            {
                <tr>
                    <td colspan="4">None found.</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">
                    <LoaderComponent />
                </td>
            </tr>
        }
    </tbody>
</BSTable>

<PagerComponent Pager="@Items" Page="@(async(p) => await PageAsync(p))"></PagerComponent>

@code
{
    [Parameter] public Guid? RepositoryId { get; set; }
    [Parameter] public Guid? RegistryId { get; set; }

    SvgService SvgService { get; set; }
    IDependencyService Service { get; set; }

    IPaginatedList<DependencyDto> Items { get; set; }
    List<DependencyKind> Kinds { get; set; } = new List<DependencyKind>();
    DependencyKind? Kind { get; set; }
    string Search { get; set; }

    protected override void OnInitialized()
    {
        Service = (IDependencyService)ScopedServices.GetService(typeof(IDependencyService));
        SvgService = (SvgService)ScopedServices.GetService(typeof(SvgService));
    }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(1);
    }

    async Task DropDownFilterAsync(ChangeEventArgs args)
    {
        if (Enum.TryParse(typeof(DependencyKind), (string)args.Value, true, out var kind))
        {
            Kind = (DependencyKind)kind;
        }
        else
        {
            Kind = null;
        }

        await PageAsync(Items.PageIndex);
    }

    async Task PageAsync(int page)
    {
        Kinds.Clear();

        if (Kind.HasValue) Kinds.Add(Kind.Value);

        if (RepositoryId.HasValue)
        {
            Items = await Service.GetByRepositoryIdAsync(RepositoryId.Value, Kinds, Search, page);
        }
        else if (RegistryId.HasValue)
        {

        }
        else
        {
            Items = await Service.GetAsync(Kinds, Search, page);
        }

        StateHasChanged();
    }
}
