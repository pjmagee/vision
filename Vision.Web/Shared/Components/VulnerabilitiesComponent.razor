@inherits OwningComponentBase

<div class="form-inline mb-4">
    <BSFormLabel Class="my-1 mr-2">Kind</BSFormLabel>
    <select @onchange="@DropDownFilterAsync" class="form-control my-1 mr-sm-2">
        <option>Any...</option>
        @foreach (var kind in AppHelper.EcosystemKinds)
        {
            <option value="@kind">@kind.GetName()</option>
        }
    </select>
    <input class="form-control mr-sm-2" @bind-Value="@Search" @bind-Value:event="oninput" type="text" />
    <button type="button" class="btn btn-primary" @onclick="@(async() => await PageAsync(Items.PageIndex))">Search</button>
</div>

<BSTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>@nameof(VulnerabilityReportDto.ReporterKind)</th>
            <th>@nameof(VulnerabilityReportDto.Link)</th>
            <th>@nameof(VulnerabilityReportDto.CheckTime)</th>
            <th>@nameof(VulnerabilityReportDto.ResponseData)</th>
        </tr>
    </thead>
    <tbody>
        @if (Items != null)
        {
            @foreach (VulnerabilityReportDto item in Items)
            {
                <tr>
                    <td>@item.ReporterKind</td>
                    <td><a href="@item.Link" target="_blank">@item.Link</a></td>
                    <td>@item.CheckTime</td>
                    <td>
                        <pre class="pre-scrollable">
                            @item.ResponseData
                        </pre>
                    </td>
                </tr>
            }

            @if (Items.Count == 0)
            {
                <tr>
                    <td colspan="4">None found.</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">
                    <LoaderComponent />
                </td>
            </tr>
        }
    </tbody>
</BSTable>

<PagerComponent Pager="Items" Page="@(async(p) => await PageAsync(p))"></PagerComponent>

@code
{
    [Parameter] public Guid? DependencyVersionId { get; set; }

    IVulnerabilityService VulnerabilityService { get; set; }
    IPaginatedList<VulnerabilityReportDto> Items { get; set; }
    EcosystemKind? Kind { get; set; }
    string Search { get; set; }

    protected override void OnInitialized()
    {
        VulnerabilityService = (IVulnerabilityService)ScopedServices.GetService(typeof(IVulnerabilityService));
    }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(1);
    }

    async Task DropDownFilterAsync(ChangeEventArgs args)
    {
        if (Enum.TryParse(typeof(EcosystemKind), (string)args.Value, true, out var kind))
        {
            Kind = (EcosystemKind)kind;
        }
        else
        {
            Kind = null;
        }

        await PageAsync(Items?.PageIndex ?? 1);
    }

    async Task PageAsync(int page)
    {
        if (DependencyVersionId.HasValue)
        {
            Items = await VulnerabilityService.GetByDependencyVersionIdAsync(DependencyVersionId.Value, page);
        }
        else if (Kind.HasValue)
        {
            Items = await VulnerabilityService.GetByEcosystemKindAsync(Kind.Value, page);
        }
        else
        {
            Items = new PaginatedList<VulnerabilityReportDto>(new List<VulnerabilityReportDto>(), 0, 1, 10);
        }

        StateHasChanged();
    }
}
