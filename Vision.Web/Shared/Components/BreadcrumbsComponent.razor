@inherits OwningComponentBase

<BSBreadcrumb>
    @if (VcsId.HasValue && VcsId.HasValue && EcosystemId.HasValue && RepositoryId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VcsId}")">@Vcs?.Endpoint</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VcsId}/repositories/{RepositoryId}")">@Repository.PathAndQuery</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VcsId}/repositories/{RepositoryId}/ecosystems")">Runtimes</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Ecosystem?.Name</BSBreadcrumbItem>
    }
    else if (VcsId.HasValue && RepositoryId.HasValue && DependencyId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VcsId}")">@Vcs?.Endpoint</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VcsId}/repositories/{RepositoryId}")">@Repository.PathAndQuery</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VcsId}/repositories/{RepositoryId}/dependencies")">Dependencies</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Dependency?.Name</BSBreadcrumbItem>
    }
    else if (AssetId.HasValue && RepositoryId.HasValue && VcsId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VcsId}")">@Vcs?.Endpoint</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VcsId}/repositories/{RepositoryId}")">@Repository?.PathAndQuery</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Asset?.Asset</BSBreadcrumbItem>
    }
    else if (RepositoryId.HasValue && VcsId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VcsId}")">@Vcs?.Endpoint</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">
            <a href="@($"/data/vcs/{VcsId}/repositories/{RepositoryId}")">@Repository?.PathAndQuery</a>
        </BSBreadcrumbItem>
    }
    else if (DependencyId.HasValue && DependencyVersionId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/dependencies">Dependencies</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/dependencies/{DependencyId}")">@Dependency?.Name</a></BSBreadcrumbItem>
        <BSBreadcrumbItem>
            <a href="@($"/data/dependencies/{DependencyId}/versions/{DependencyVersionId}")">
                @Version?.Version
            </a>
        </BSBreadcrumbItem>
    }
    else if (VcsId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true"> <a href="@($"/data/vcs/{VcsId}")">@Vcs?.Endpoint</a></BSBreadcrumbItem>
    }
    else if (DependencyId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/dependencies">Dependencies</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Dependency?.Name</BSBreadcrumbItem>
    }
    else if (EcosystemVersionId.HasValue && EcosystemId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/ecosystems">Ecosystems</a></BSBreadcrumbItem>
        <BSBreadcrumbItem>@Ecosystem?.Name</BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">
            <a href="@($"/data/ecosystems/{EcosystemId}/versions/{EcosystemVersionId}")">@EcosystemVersion?.Version</a>
        </BSBreadcrumbItem>
    }
    else if (EcosystemId.HasValue && !EcosystemVersionId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/ecosystems">Ecosystems</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Ecosystem?.Name</BSBreadcrumbItem>
    }
    else if (RegistryId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/registries">Registries</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">
            <a href="@($"/data/registries/{RegistryId}")">@Registry?.Endpoint</a>
        </BSBreadcrumbItem>
    }
    else
    {
        if (ChildContent != null)
        {
            @ChildContent
        }
    }
</BSBreadcrumb>

@code
{
    [Parameter] public Guid? RepositoryId { get; set; }
    [Parameter] public Guid? EcosystemId { get; set; }
    [Parameter] public Guid? EcosystemVersionId { get; set; }
    [Parameter] public Guid? VcsId { get; set; }
    [Parameter] public Guid? AssetId { get; set; }
    [Parameter] public Guid? DependencyId { get; set; }
    [Parameter] public Guid? DependencyVersionId { get; set; }
    [Parameter] public Guid? RegistryId { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    IRepositoryService RepositoryService { get; set; }
    IEcosystemService EcosystemService { get; set; }
    IVersionControlService VersionControlService { get; set; }
    IAssetService AssetService { get; set; }
    IRegistryService RegistryService { get; set; }
    IDependencyService DependencyService { get; set; }
    IDependencyVersionService VersionService { get; set; }

    RepositoryDto Repository { get; set; }
    VersionControlDto Vcs { get; set; }
    AssetDto Asset { get; set; }
    DependencyDto Dependency { get; set; }
    EcosystemDto Ecosystem { get; set; }
    DependencyVersionDto Version { get; set; }
    RegistryDto Registry { get; set; }
    EcosystemVersionDto EcosystemVersion { get; set; }

    protected override void OnInitialized()
    {
        RepositoryService = (IRepositoryService)ScopedServices.GetService(typeof(IRepositoryService));
        EcosystemService = (IEcosystemService)ScopedServices.GetService(typeof(IEcosystemService));
        VersionControlService = (IVersionControlService)ScopedServices.GetService(typeof(IVersionControlService));
        AssetService = (IAssetService)ScopedServices.GetService(typeof(IAssetService));
        RegistryService = (IRegistryService)ScopedServices.GetService(typeof(IRegistryService));
        DependencyService = (IDependencyService)ScopedServices.GetService(typeof(IDependencyService));
        VersionService = (IDependencyVersionService)ScopedServices.GetService(typeof(IDependencyVersionService));
    }

    protected override async Task OnParametersSetAsync()
    {
        if (RepositoryId.HasValue) Repository = await RepositoryService.GetByIdAsync(RepositoryId.Value);
        if (EcosystemId.HasValue) Ecosystem = await EcosystemService.GetEcosystemByIdAsync(EcosystemId.Value);
        if (EcosystemVersionId.HasValue) EcosystemVersion = await EcosystemService.GetEcoVersionByIdAsync(EcosystemVersionId.Value);
        if (VcsId.HasValue) Vcs = await VersionControlService.GetByIdAsync(VcsId.Value);
        if (AssetId.HasValue) Asset = await AssetService.GetByIdAsync(AssetId.Value);
        if (RegistryId.HasValue) Registry = await RegistryService.GetByIdAsync(RegistryId.Value);
        if (DependencyId.HasValue) Dependency = await DependencyService.GetByIdAsync(DependencyId.Value);
        if (DependencyVersionId.HasValue) Version = await VersionService.GetByIdAsync(DependencyVersionId.Value);
    }
}