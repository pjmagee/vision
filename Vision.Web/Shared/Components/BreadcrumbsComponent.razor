@inherits OwningComponentBase

<BSBreadcrumb>
    @if (VersionControlId.HasValue && VersionControlId.HasValue && RuntimeId.HasValue && RepositoryId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VersionControlId}")">@VersionControl?.Endpoint</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VersionControlId}/repositories/{RepositoryId}")">@Repository.PathAndQuery</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VersionControlId}/repositories/{RepositoryId}/runtimes")">Runtimes</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Runtime?.Name</BSBreadcrumbItem>
    }
    else if (VersionControlId.HasValue && RepositoryId.HasValue && DependencyId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VersionControlId}")">@VersionControl?.Endpoint</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VersionControlId}/repositories/{RepositoryId}")">@Repository.PathAndQuery</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VersionControlId}/repositories/{RepositoryId}/dependencies")">Dependencies</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Dependency?.Name</BSBreadcrumbItem>
    }
    else if (AssetId.HasValue && RepositoryId.HasValue && VersionControlId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VersionControlId}")">@VersionControl?.Endpoint</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VersionControlId}/repositories/{RepositoryId}")">@Repository?.PathAndQuery</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Asset?.Asset</BSBreadcrumbItem>
    }
    else if (RepositoryId.HasValue && VersionControlId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/{VersionControlId}")">@VersionControl?.Endpoint</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true"><a href="@($"/data/vcs/{VersionControlId}/repositories/{RepositoryId}")">@Repository?.PathAndQuery</a></BSBreadcrumbItem>
    }
    else if (DependencyId.HasValue && VersionId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/dependencies">Dependencies</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/dependencies/{DependencyId}")">@Dependency?.Name</a></BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/dependencies/{DependencyId}/versions/{VersionId}")">@Version?.Version</a></BSBreadcrumbItem>
    }
    else if (VersionControlId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="@($"/data/vcs/")">Version Control</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true"> <a href="@($"/data/vcs/{VersionControlId}")">@VersionControl?.Endpoint</a></BSBreadcrumbItem>
    }
    else if (DependencyId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/dependencies">Dependencies</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Dependency?.Name</BSBreadcrumbItem>
    }
    else if (RuntimeVersionId.HasValue && RuntimeId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/runtimes">Runtimes</a></BSBreadcrumbItem>
        <BSBreadcrumbItem>@Runtime?.Name</BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true"> <a href="@($"/data/runtimes/{RuntimeId}/versions/{RuntimeVersionId}")">@RuntimeVersion?.Version</a> </BSBreadcrumbItem>
    }
    else if (RuntimeId.HasValue && !RuntimeVersionId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/runtimes">Runtimes</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true">@Runtime?.Name</BSBreadcrumbItem>
    }
    else if (RegistryId.HasValue)
    {
        <BSBreadcrumbItem>Data</BSBreadcrumbItem>
        <BSBreadcrumbItem><a href="/data/registries">Registries</a></BSBreadcrumbItem>
        <BSBreadcrumbItem IsActive="true"><a href="@($"/data/registries/{RegistryId}")">@Registry?.Endpoint</a></BSBreadcrumbItem>
    }
    else
    {
        if (ChildContent != null)
        {
            @ChildContent
        }
    }
</BSBreadcrumb>

@code
{
    [Parameter] public Guid? RepositoryId { get; set; }
    [Parameter] public Guid? RuntimeId { get; set; }
    [Parameter] public Guid? RuntimeVersionId { get; set; }
    [Parameter] public Guid? VersionControlId { get; set; }
    [Parameter] public Guid? AssetId { get; set; }
    [Parameter] public Guid? DependencyId { get; set; }
    [Parameter] public Guid? VersionId { get; set; }
    [Parameter] public Guid? RegistryId { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    IRepositoryService RepositoryService { get; set; }
    IRuntimeService RuntimeService { get; set; }
    IVersionControlService VersionControlService { get; set; }
    IAssetService AssetService { get; set; }
    IRegistryService RegistryService { get; set; }
    IDependencyService DependencyService { get; set; }
    IDependencyVersionService VersionService { get; set; }

    RepositoryDto Repository { get; set; }
    VersionControlDto VersionControl { get; set; }
    AssetDto Asset { get; set; }
    DependencyDto Dependency { get; set; }
    RuntimeDto Runtime { get; set; }
    DependencyVersionDto Version { get; set; }
    RegistryDto Registry { get; set; }
    RuntimeVersionDto RuntimeVersion { get; set; }

    protected override void OnInitialized()
    {
        RepositoryService = (IRepositoryService)ScopedServices.GetService(typeof(IRepositoryService));
        RuntimeService = (IRuntimeService)ScopedServices.GetService(typeof(IRuntimeService));
        VersionControlService = (IVersionControlService)ScopedServices.GetService(typeof(IVersionControlService));
        AssetService = (IAssetService)ScopedServices.GetService(typeof(IAssetService));
        RegistryService = (IRegistryService)ScopedServices.GetService(typeof(IRegistryService));
        DependencyService = (IDependencyService)ScopedServices.GetService(typeof(IDependencyService));
        VersionService = (IDependencyVersionService)ScopedServices.GetService(typeof(IDependencyVersionService));
    }

    protected override async Task OnParametersSetAsync()
    {
        if (RepositoryId.HasValue) Repository = await RepositoryService.GetByIdAsync(RepositoryId.Value);
        if (RuntimeId.HasValue) Runtime = await RuntimeService.GetRuntimeByIdAsync(RuntimeId.Value);
        if (RuntimeVersionId.HasValue) RuntimeVersion = await RuntimeService.GetVersionByIdAsync(RuntimeVersionId.Value);
        if (VersionControlId.HasValue) VersionControl = await VersionControlService.GetByIdAsync(VersionControlId.Value);
        if (AssetId.HasValue) Asset = await AssetService.GetByIdAsync(AssetId.Value);
        if (RegistryId.HasValue) Registry = await RegistryService.GetByIdAsync(RegistryId.Value);
        if (DependencyId.HasValue) Dependency = await DependencyService.GetByIdAsync(DependencyId.Value);
        if (VersionId.HasValue) Version = await VersionService.GetByIdAsync(VersionId.Value);
    }
}
