@inherits OwningComponentBase

<div class="form-inline mb-4">
    <input class="form-control mr-sm-2" @bind-Value="@Search" @bind-Value:event="oninput" type="text" />
    <button type="button" class="btn btn-primary" @onclick="@(async() => await PageAsync(Items.PageIndex))">Search</button>
</div>

<BSTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>@(nameof(RepositoryDto.Url))</th>
            <th>@(nameof(RepositoryDto.Assets))</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td>
                        <a href="@($"/data/vcs/{item.VcsId}/repositories/{item.RepositoryId}")">@item.AbsoluteUri</a>
                    </td>
                    <td>@item.Assets</td>
                    <td>
                        @if (item.IsIgnored)
                        {
                            <button class="btn btn-primary" @onclick="@(async() => await ToggleIgnoreAsync(item))">Add</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="@(async() => await ToggleIgnoreAsync(item))">Ignore</button>
                        }
                    </td>
                </tr>
            }

            @if (Items.Count == 0)
            {
                <tr>
                    <td colspan="3">No repositories found.</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3">
                    <LoaderComponent />
                </td>
            </tr>
        }
    </tbody>
</BSTable>

<PagerComponent Pager="Items" Page="@(async(p) => await PageAsync(p))"></PagerComponent>

@code
{
    [Parameter] public Guid? EcosystemId { get; set; }
    [Parameter] public Guid? EcosystemVersionId { get; set; }
    [Parameter] public Guid? VcsId { get; set; }
    [Parameter] public bool ShowIgnored { get; set; }

    public string Search { get; set; }

    IPaginatedList<RepositoryDto> Items { get; set; }
    IRepositoryService Service { get; set; }

    protected override void OnInitialized()
    {
        Service = (IRepositoryService)ScopedServices.GetService(typeof(IRepositoryService));
    }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(1);
    }

    async Task ToggleIgnoreAsync(RepositoryDto dto)
    {
        await Service.ToggleIgnoreAsync(dto.RepositoryId);
        await PageAsync(Items.PageIndex);
    }

    async Task PageAsync(int page = 1)
    {
        if (VcsId.HasValue)
        {
            Items = await Service.GetByVcsIdAsync(VcsId.Value, ShowIgnored, Search, page);
        }
        else if (EcosystemId.HasValue)
        {
            Items = await Service.GetByEcosystemIdAsync(EcosystemId.Value, ShowIgnored, Search, page);
        }
        else if (EcosystemVersionId.HasValue)
        {
            Items = await Service.GetByEcosystemVersionIdAsync(EcosystemVersionId.Value, ShowIgnored, Search, page);
        }
        else
        {
            Items = await Service.GetAsync(ShowIgnored, Search, page);
        }

        StateHasChanged();
    }
}