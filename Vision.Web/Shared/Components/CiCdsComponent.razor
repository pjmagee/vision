@inherits OwningComponentBase

<BSTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>Kind</th>
            <th>Endpoint</th>
            <th>Api key</th>
            <th>Username</th>
            <th>Password</th>
            <th>Enabled</th>
            <th>Guest enabled</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td class="@item.Kind.GetIconClass() text-center">@SvgService.GetSvg(item.Kind)</td>
                    <td>@item.Endpoint</td>
                    <td>@item.ApiKey.ToYesNo()</td>
                    <td>@item.ApiKey.ToYesNo()</td>
                    <td>@item.ApiKey.ToYesNo()</td>
                    <th>@item.IsEnabled.ToYesNo()</th>
                    <th>@item.IsGuestEnabled.ToYesNo()</th>
                    <td><a href="@($"/sources/edit/cicds/{item.CiCdId}")">Edit</a></td>
                </tr>
            }

            @if (Items.Count == 0)
            {
                <tr>
                    <td colspan="8">None found.</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6">
                    <LoaderComponent />
                </td>
            </tr>
        }
    </tbody>
</BSTable>

<PagerComponent Pager="Items" Page="@(async(p) => await PageAsync(p))"></PagerComponent>

@code
{
    IPaginatedList<CiCdDto> Items { get; set; }

    ICiCdService Service { get; set; }
    SvgService SvgService { get; set; }

    protected override void OnInitialized()
    {
        Service = (ICiCdService)ScopedServices.GetService(typeof(ICiCdService));
        SvgService = (SvgService)ScopedServices.GetService(typeof(SvgService));
    }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(1);
    }

    async Task PageAsync(int page)
    {
        Items = await Service.GetAsync(page);
        StateHasChanged();
    }
}