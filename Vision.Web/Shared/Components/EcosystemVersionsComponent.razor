@inherits OwningComponentBase

<BSTable IsBordered="true" IsResponsive="true" IsSmall="true" IsStriped="true">
    <BSTableHead>
        <tr>
            <th>@nameof(EcosystemVersionDto.Version)</th>
            <th>@nameof(EcosystemVersionDto.Assets)</th>
        </tr>
    </BSTableHead>
    <tbody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td>
                        <a href="@($"/data/ecosystems/{item.EcosystemId}/versions/{item.EcosystemVersionId}")">@item.Version</a>
                    </td>
                    <td>@item.Assets</td>
                </tr>
            }

            @if (Items.Count == 0)
            {
                <tr>
                    <td colspan="2">None found. </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3">
                    <LoaderComponent />
                </td>
            </tr>
        }
    </tbody>
</BSTable>

<PagerComponent Pager="Items" Page="@(async(p) => await PageAsync(p))"></PagerComponent>

@code
{
    [Parameter] public Guid? EcosystemId { get; set; }

    IEcosystemService EcosystemService { get; set; }
    SvgService SvgService { get; set; }

    IPaginatedList<EcosystemVersionDto> Items { get; set; }

    protected override void OnInitialized()
    {
        EcosystemService = (IEcosystemService)ScopedServices.GetService(typeof(IEcosystemService));
        SvgService = (SvgService)ScopedServices.GetService(typeof(SvgService));
    }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(page: 1);
    }

    async Task PageAsync(int page = 1)
    {
        if (EcosystemId.HasValue)
        {
            Items = await EcosystemService.GetByEcosystemIdAsync(EcosystemId.Value, page);
        }

        StateHasChanged();
    }
}
