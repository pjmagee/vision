@inherits OwningComponentBase

<BSTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>Version</th>
            <th>Is latest</th>
            <th>Assets</th>
        </tr>
    </thead>
    <tbody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td><a href="@($"/data/dependencies/{item.DependencyId}/versions/{item.DependencyVersionId}")">@item.Version</a></td>
                    <td>@item.IsLatest.ToYesNo()</td>
                    <td>@item.Assets</td>
                </tr>
            }

            @if (Items.Count == 0)
            {
                <tr>
                    <td colspan="3">None found.</td>
                </tr>
            }
        }
        else
        {
            <LoaderComponent />
        }
    </tbody>
</BSTable>

<PagerComponent Pager="Items" Page="@(async(p) => await PageAsync(p))"></PagerComponent>

@code
{
    [Parameter] public Guid? DependencyId { get; set; }

    IDependencyVersionService VersionService { get; set; }
    IPaginatedList<DependencyVersionDto> Items { get; set; }

    protected override void OnInitialized()
    {
        VersionService = (IDependencyVersionService) ScopedServices.GetService(typeof(IDependencyVersionService));
    }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(1);
    }

    async Task PageAsync(int page)
    {
        if (DependencyId.HasValue)
        {
            Items = await VersionService.GetByDependencyIdAsync(DependencyId.Value, page);
            StateHasChanged();
        }
    }
}
