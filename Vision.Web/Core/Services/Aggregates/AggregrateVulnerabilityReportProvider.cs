using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Vision.Web.Core
{
    public class AggregrateVulnerabilityReportProvider : IAggregrateVulnerabilityReportProvider
    {
        private readonly IEnumerable<IVulnerabilityProvider> providers;
        private readonly ILogger<AggregrateVulnerabilityReportProvider> logger;

        public AggregrateVulnerabilityReportProvider(IEnumerable<IVulnerabilityProvider> providers, ILogger<AggregrateVulnerabilityReportProvider> logger)
        {
            this.providers = providers;
            this.logger = logger;
        }

        public async Task<IEnumerable<Vulnerability>> GetByDependencyVersionAsync(DependencyVersion dependencyVersion)
        {
            List<Vulnerability> reports = new List<Vulnerability>();

            using (var scope = logger.BeginScope($"{nameof(GetByDependencyVersionAsync)}::[{dependencyVersion.Dependency.Name}]::[{dependencyVersion.Version}]::REPORT"))
            {
                foreach (IVulnerabilityProvider provider in providers)
                {
                    Vulnerability report = await provider.GetByDependencyVersionAsync(dependencyVersion);

                    reports.Add(report);
                }
            }

            return reports;
        }
    }
}