@page "/data/vcs/{VersionControlId:guid}"
@page "/data/vcs/{VersionControlId:guid}/page/{PageIndex:int}"

<BreadcrumbsComponent>
    <li class="breadcrumb-item">Data</li>
    <li class="breadcrumb-item"><a href="/data/vcs">Version control systems</a></li>
    <li class="breadcrumb-item active" aria-current="page">@VersionControl?.Endpoint</li>
</BreadcrumbsComponent>

<RefreshComponent Target="TaskScopeKind.VersionControl" Id="@VersionControlId"></RefreshComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Repositories</h6>
    </div>
    <div class="card-body">
        @if (Repositories != null)
        {
            <RepositoriesComponent PagedItems="Repositories" Page="@((int page) => UriHelper.NavigateTo($"/data/vcs/{VersionControlId}/page/{page}"))"></RepositoriesComponent>
        }
        else
        {
            <LoaderComponent></LoaderComponent>
        }
    </div>
</div>

@functions
{
    [Parameter] Guid VersionControlId { get; set; }
    [Parameter] int PageIndex { get; set; } = 1;
    [Parameter] int PageSize { get; set; } = 10;

    [Inject] VersionControlsService VersionControlsService { get; set; }
    [Inject] IUriHelper UriHelper { get; set; }

    PaginatedList<RepositoryDto> Repositories { get; set; }
    VersionControlDto VersionControl { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        VersionControl = await VersionControlsService.GetVersionControlByIdAsync(VersionControlId);
        Repositories = await VersionControlsService.GetRepositoriesByIdAsync(VersionControlId, PageIndex, PageSize);
    }
}
