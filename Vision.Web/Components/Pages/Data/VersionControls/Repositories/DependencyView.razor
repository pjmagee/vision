@page "/data/vcs/{VersionControlId:guid}/repositories/{RepositoryId:guid}/dependencies/{DependencyId:guid}"



@inject IJSRuntime Runtime

<BreadcrumbsComponent>
    <li class="breadcrumb-item">Data</li>
    <li class="breadcrumb-item">Version control systems</li>
    <li class="breadcrumb-item"><a href="@($"/vcs/{VersionControlId}/repositories/{RepositoryId}")">Repositories</a></li>
    <li class="breadcrumb-item"><a href="@($"/vcs/{VersionControlId}/repositories/{RepositoryId}/dependencies")">Dependencies</a></li>
    <li class="breadcrumb-item active">@Dependency?.Name</li>
</BreadcrumbsComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Versions</h6>
    </div>
    <div class="card-body">
        @if (Versions != null)
        {
            <DependencyVersionsComponent Items="Versions"></DependencyVersionsComponent>
        }
        else
        {
            <LoaderComponent></LoaderComponent>
        }
    </div>
</div>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Assets</h6>
    </div>
    <div class="card-body">
        @if (Assets != null)
        {
            <AssetDependenciesComponent Items="Assets"></AssetDependenciesComponent>
        }
        else
        {
            <LoaderComponent></LoaderComponent>
        }
    </div>
</div>

@functions
{
    [Parameter] Guid DependencyId { get; set; }
    [Parameter] Guid RepositoryId { get; set; }
    [Parameter] Guid VersionControlId { get; set; }

    [Inject] DependenciesService DependenciesService { get; set; }

    DependencyDto Dependency { get; set; }
    IEnumerable<AssetDependencyDto> Assets { get; set; }
    IEnumerable<DependencyVersionDto> Versions { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Dependency = await DependenciesService.GetDependencyByIdAsync(DependencyId);
        Assets = await DependenciesService.GetAssetsByDependencyIdAsync(DependencyId);
        Versions = await DependenciesService.GetVersionsByDependencyIdAsync(DependencyId);
    }
}
