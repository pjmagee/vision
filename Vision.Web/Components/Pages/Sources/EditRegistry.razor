@page "/sources/edit/registries/{RegistryId:guid}"

<BreadcrumbsComponent>
    <BreadcrumbItem>Sources</BreadcrumbItem>
    <BreadcrumbItem>Registries</BreadcrumbItem>
    <BreadcrumbItem IsActive="true">Edit</BreadcrumbItem>
</BreadcrumbsComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Update</h6>
    </div>
    <div class="card-body">
        @if (Model != null)
        {
            <Alert IsDismissible="true" Color="Color.Info">
                Username, Password and API Keys are Encrypted upon saving.
            </Alert>

            <EditForm Model="@Model" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />

                <FormGroup>
                    <BlazorLabel>Endpoint</BlazorLabel>
                    <InputText Class="form-control" bind-Value="@Model.Endpoint" />
                    <ValidationMessage For="@(() => Model.Endpoint)" />
                </FormGroup>

                <FormGroup>
                    <BlazorLabel>Api Key</BlazorLabel>
                    <InputText Class="form-control" bind-Value="@Model.ApiKey" />
                    <ValidationMessage For="@(() => Model.ApiKey)" />
                </FormGroup>

                <FormGroup>
                    <BlazorLabel>Username</BlazorLabel>
                    <InputText Class="form-control" bind-Value="@Model.Username" />
                    <ValidationMessage For="@(() => Model.Username)" />
                </FormGroup>

                <FormGroup>
                    <BlazorLabel>Password</BlazorLabel>
                    <InputText Class="form-control" bind-Value="@Model.Password" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </FormGroup>

                <FormGroup>
                    <InputSelect Class="form-control" bind-Value="@Model.Kind">
                        <option>Select</option>
                        @foreach (var kind in Enum.GetValues(typeof(DependencyKind)).Cast<DependencyKind>())
                        {
                            <option value="@kind">@kind.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Model.Kind)" />
                </FormGroup>

                <FormGroup>
                    <div class="form-check">
                        <InputCheckbox Class="form-check-input" bind-Value="@Model.IsPublic" />
                        <label class="form-check-label" for="isPublic">Public</label>
                    </div>
                </FormGroup>

                <FormGroup>
                    <div class="form-check">
                        <InputCheckbox Class="form-check-input" bind-Value="@Model.IsEnabled" />
                        <label class="form-check-label" for="isEnabled">Enabled</label>
                    </div>
                </FormGroup>

                <button type="submit" class="btn btn-primary">Update</button>
            </EditForm>
        }
        else
        {
            <LoaderComponent />
        }
    </div>
</div>

@functions
{
    [Parameter] Guid RegistryId { get; set; }

    [Inject] IRegistryService RegistryService { get; set; }
    [Inject] IUriHelper UriHelper { get; set; }

    RegistryDto Model { get; set; }

    protected async Task Submit()
    {
        await RegistryService.UpdateAsync(Model);
        UriHelper.NavigateTo("/data/registries");        
    }

    protected override async Task OnParametersSetAsync()
    {
        Model = await RegistryService.GetByIdAsync(RegistryId);
    }
}
