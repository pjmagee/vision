@page "/sources/cicds"

<BreadcrumbsComponent>
    <BreadcrumbItem>Sources</BreadcrumbItem>
    <BreadcrumbItem>Contionus integration & Continious delivery</BreadcrumbItem>
</BreadcrumbsComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Add new</h6>
    </div>
    <div class="card-body">

        <EditForm Model="@Model" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />

            <FormGroup>
                <BlazorLabel>Endpoint</BlazorLabel>
                <InputText Class="form-control" bind-Value="@Model.Endpoint" />
                <ValidationMessage For="@(() => Model.Endpoint)" />
            </FormGroup>

            <FormGroup>
                <BlazorLabel>Api Key</BlazorLabel>
                <InputText Class="form-control" bind-Value="@Model.ApiKey" />
                <ValidationMessage For="@(() => Model.ApiKey)" />
            </FormGroup>

            <FormGroup>
                <BlazorLabel>Username</BlazorLabel>
                <InputText Class="form-control" bind-Value="@Model.Username" />
                <ValidationMessage For="@(() => Model.Username)" />
            </FormGroup>

            <FormGroup>
                <BlazorLabel>Password</BlazorLabel>
                <InputText Class="form-control" bind-Value="@Model.Password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </FormGroup>

            <FormGroup>
                <BlazorLabel>Kind</BlazorLabel>
                <InputSelect class="form-control" bind-Value="@Model.Kind">
                    <option selected>Select</option>
                    @foreach (CiCdKind kind in Enum.GetValues(typeof(CiCdKind)).Cast<CiCdKind>())
                    {
                        <option value="@kind">@kind.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Model.Kind)" />
            </FormGroup>

            <FormGroup>
                <div class="form-check">
                    <InputCheckbox Class="form-check-input" bind-Value="@Model.IsGuestEnabled" />
                    <FormLabel Class="form-check-label">Guest enabled</FormLabel>
                </div>
            </FormGroup>

            <FormGroup>
                <div class="form-check">
                    <InputCheckbox Class="form-check-input" bind-Value="@Model.IsEnabled" />
                    <FormLabel Class="form-check-label">Enabled</FormLabel>
                </div>
            </FormGroup>

            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@functions
{
    [Inject] ICiCdService CiCdService { get; set; }

    CiCdDto Model { get; set; } = new CiCdDto();

    protected async Task Submit()
    {
        await CiCdService.CreateAsync(Model);
    }
}