@page "/sources/edit/vcs/{VersionControlId:guid}"

<BreadcrumbsComponent>
    <BreadcrumbItem>Sources</BreadcrumbItem>
    <BreadcrumbItem>Version control systems</BreadcrumbItem>
    <BreadcrumbItem IsActive="true">Edit</BreadcrumbItem>
</BreadcrumbsComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Update</h6>
    </div>
    <div class="card-body">
        @if (Model != null)
        {
        <EditForm Model="@Model" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />

            <FormGroup>
                <BlazorLabel>Endpoint</BlazorLabel>
                <InputText class="form-control" bind-Value="@Model.Endpoint" />
                <ValidationMessage For="@(() => Model.Endpoint)" />
            </FormGroup>

            <FormGroup>
                <BlazorLabel>Api Key</BlazorLabel>
                <InputText class="form-control" bind-Value="@Model.ApiKey" />
                <ValidationMessage For="@(() => Model.ApiKey)" />
            </FormGroup>

            <FormGroup>
                <BlazorLabel>Kind</BlazorLabel>
                <InputSelect class="form-control" bind-Value="@Model.Kind">
                    <option>Select</option>
                    @foreach (var kind in Enum.GetValues(typeof(VersionControlKind)).Cast<VersionControlKind>())
                    {
                        <option value="@kind">@kind.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Model.Kind)" />
            </FormGroup>

            <FormGroup>
                <div class="form-check">
                    <InputCheckbox class="form-check-input" bind-Value="@Model.IsEnabled" id="isEnabled" />
                    <label class="form-check-label" for="isEnabled">Enabled</label>
                </div>
            </FormGroup>

            <button type="submit" class="btn btn-primary">Update</button>
        </EditForm>
        }
        else
        {
            <LoaderComponent />
        }
    </div>
</div>

@functions
{
    [Parameter] Guid VersionControlId { get; set; }

    [Inject] IVersionControlService VersionControlService { get; set; }
    [Inject] IUriHelper UriHelper { get; set; }

    VersionControlDto Model { get; set; }

    protected async Task Submit()
    {
        await VersionControlService.UpdateAsync(Model);
        UriHelper.NavigateTo("/data/vcs");
    }

    protected override async Task OnParametersSetAsync()
    {
        Model = await VersionControlService.GetByIdAsync(VersionControlId);        
    }
}
