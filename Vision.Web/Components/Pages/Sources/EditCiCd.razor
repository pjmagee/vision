@page "/sources/edit/cicds/{CiCdId:guid}"

<BreadcrumbsComponent>
    <BreadcrumbItem>Sources</BreadcrumbItem>
    <BreadcrumbItem>Contionus integration & Continious delivery</BreadcrumbItem>
    <BreadcrumbItem IsActive="true">Edit</BreadcrumbItem>
</BreadcrumbsComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Update</h6>
    </div>
    <div class="card-body">
        @if (Model != null)
        {
            <Alert IsDismissible="true" Color="Color.Info">
                Username, Password and API Keys are Encrypted upon saving.
            </Alert>

            <EditForm Model="@Model" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />

                <FormGroup>
                    <BlazorLabel>Endpoint</BlazorLabel>
                    <InputText Class="form-control" bind-Value="@Model.Endpoint" />
                    <ValidationMessage For="@(() => Model.Endpoint)" />
                </FormGroup>

                <FormGroup>
                    <BlazorLabel>ApiKey</BlazorLabel>
                    <InputText Class="form-control" bind-Value="@Model.ApiKey" />
                    <ValidationMessage For="@(() => Model.ApiKey)" />
                </FormGroup>

                <FormGroup>
                    <BlazorLabel>Username</BlazorLabel>
                    <InputText Class="form-control" bind-Value="@Model.Username" />
                    <ValidationMessage For="@(() => Model.Username)" />
                </FormGroup>

                <FormGroup>
                    <BlazorLabel>Password</BlazorLabel>
                    <InputText Class="form-control" bind-Value="@Model.Password" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </FormGroup>

                <FormGroup>
                    <InputSelect class="form-control" bind-Value="@Model.Kind">
                        <options>Select</options>
                        @foreach (CiCdKind kind in Enum.GetValues(typeof(CiCdKind)).Cast<CiCdKind>())
                        {
                            <option value="@kind">@kind.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Model.Kind)" />
                </FormGroup>

                <FormGroup>
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" bind-Value="@Model.IsEnabled" />
                        <label class="form-check-label">Enabled</label>
                    </div>
                </FormGroup>

                <FormGroup>
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" bind-Value="@Model.IsGuestEnabled" />
                        <label class="form-check-label">Guest Authentication</label>
                    </div>
                </FormGroup>

                <button type="submit" class="btn btn-primary">Update</button>
            </EditForm>
        }
        else
        {
            <LoaderComponent />
        }
    </div>
</div>

@functions
{
    [Parameter] Guid CiCdId { get; set; }

    [Inject] ICiCdService CiCdService { get; set; }
    [Inject] IUriHelper UriHelper { get; set; }

    CiCdDto Model { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Model = await CiCdService.GetByIdAsync(CiCdId);
    }

    protected async Task Submit()
    {
        await CiCdService.UpdateAsync(Model);
        UriHelper.NavigateTo("/data/cicds");
    }
}