

<BlazorTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>Kind</th>
            <th>Endpoint</th>
            <th>Dependencies</th>
            <th>Public</th>
            <th>Enabled</th>
            <th>API Key</th>
            <th>Username</th>
            <th>Password</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td class="@item.Kind.GetIconClass()">@SvgService.GetSvg(item.Kind)</td>
                    <td><a href="@($"/data/registries/{item.RegistryId}")">@item.Endpoint</a></td>
                    <td>@item.Dependencies</td>
                    <td>@item.IsPublic</td>
                    <td>@item.IsEnabled</td>
                    <td title="@item.ApiKey">@(string.IsNullOrWhiteSpace(item.ApiKey) ? "Empty" : "Set")</td>
                    <td title="@item.Username">@(string.IsNullOrWhiteSpace(item.Username) ? "Empty" : "Set")</td>
                    <td title="@item.Password">@(string.IsNullOrWhiteSpace(item.Password) ? "Empty" : "Set")</td>
                    <td>
                        <a href="@($"/sources/edit/registries/{item.RegistryId}")">Edit</a>
                    </td>
                </tr>
            }

            @if (Items.Count == 0)
            {
                <tr>
                    <td colspan="3">
                        No registries found.
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="9">
                    <LoaderComponent></LoaderComponent>
                </td>
            </tr>
        }
    </tbody>
</BlazorTable>

<PagerComponent Pager="Items" Page="@(async(p) => await PageAsync(p))"></PagerComponent>

@functions
{   
    [Inject] IRegistryService Service { get; set; }
    [Inject] SvgService SvgService { get; set; }

    IPaginatedList<RegistryDto> Items { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(1);
    }

    async Task PageAsync(int page)
    {
        Items = await Service.GetAsync(page);
        StateHasChanged();
    }
}
