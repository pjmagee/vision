<BlazorTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>Url</th>
            <th>Assets</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td><a href="@($"/data/vcs/{item.VersionControlId}/repositories/{item.RepositoryId}")">@item.WebUrl</a></td>
                    <td>@item.Assets</td>
                    <td>
                        @if (item.IsIgnored)
                        {
                            <button class="btn btn-primary" onclick="@(async() => await ToggleIgnoreAsync(item))">Add</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" onclick="@(async() => await ToggleIgnoreAsync(item))">Ignore</button>
                        }
                    </td>
                </tr>
            }
        }
        else
        {
            <LoaderComponent></LoaderComponent>
        }
    </tbody>
</BlazorTable>

<PagerComponent Pager="Items" Page="@(async(p) => await PageAsync(p))"></PagerComponent>

@functions
{
    [Parameter] Guid? FrameworkId { get; set; }
    [Parameter] Guid? VersionControlId { get; set; }
    [Parameter] bool ShowIgnored { get; set; }

    [Inject] RepositoriesService Service { get; set; }

    PaginatedList<RepositoryDto> Items { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(page: 1);
    }

    async Task ToggleIgnoreAsync(RepositoryDto dto)
    {
        await Service.ToggleIgnoreAsync(dto.RepositoryId);
        await PageAsync(Items.PageIndex);
        StateHasChanged();
        Refresh?.Invoke();
    }

    async Task PageAsync(int page = 1)
    {
        if(VersionControlId.HasValue)
        {
            Items = await Service.GetByVersionControlIdAsync(VersionControlId.Value, ShowIgnored, page);
        }
        else if(FrameworkId.HasValue)
        {
            Items = await Service.GetByFrameworkIdAsync(FrameworkId.Value, ShowIgnored, page);
        }
        else
        {
            Items = await Service.GetAsync(ShowIgnored, page);
        }

        StateHasChanged();
    }
}