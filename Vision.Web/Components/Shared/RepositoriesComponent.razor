<BlazorTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>Url</th>
            <th>Assets</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in PagedItems)
        {
            <tr>
                <td><a href="@($"/data/vcs/{item.VersionControlId}/repositories/{item.RepositoryId}")">@item.WebUrl</a></td>
                <td>@item.Assets</td>
                <td></td>
            </tr>
        }
    </tbody>
</BlazorTable>

<Pagination Alignment="Alignment.Right">
    <PaginationItem IsDisabled="@(PagedItems.HasPreviousPage == false)">
        <PaginationLink Href="#" onclick="@(() => Page(PagedItems.PageIndex - 1))" PaginationLinkType="PaginationLinkType.PreviousText" />
    </PaginationItem>

    @foreach (var page in Maker(PagedItems.PageIndex, PagedItems.TotalPages))
    {
        <PaginationItem IsActive="@(page.Item1 == PagedItems.PageIndex)">
            <PaginationLink Href="#" onclick="@(() => Page(page.Item1))" PaginationLinkType="PaginationLinkType.Custom">@(page.Item2)</PaginationLink>
        </PaginationItem>
    }    

    <PaginationItem IsDisabled="@(PagedItems.HasNextPage == false)">
        <PaginationLink Href="#" onclick="@(() => Page(PagedItems.PageIndex + 1))" PaginationLinkType="PaginationLinkType.NextText" />
    </PaginationItem>
</Pagination>

@functions
{
    [Parameter] PaginatedList<RepositoryDto> PagedItems { get; set; }
    [Parameter] IEnumerable<RepositoryDto> Items { get; set; }
    [Parameter] Action<int> Page { get; set; }

    private static List<(int, string)> Maker(int c, int m)
    {
        int current = c;
        int last = m;
        int delta = 4;
        int left = current - delta;
        int right = current + delta + 1;

        List<int> range = new List<int>();
        List<(int, string)> rangeWithDots = new List<(int, string)>();

        int l = 0;

        for(int i = 1; i<=last; i++)
        {
            if(i == 1 || i == last || i>= left && i < right)
            {
                range.Add(i);
            }
        }

        foreach (var item in range)
        {
            if(l > 0)
            {
                if(item - l == 2)
                {
                    var result = (l + 1);

                    rangeWithDots.Add((result, (l + 1).ToString()));
                }
                else if (item - l != 1)
                {
                    rangeWithDots.Add((item, "..."));
                }
            }
            rangeWithDots.Add((item, item.ToString()));
            l = item;
        }

        return rangeWithDots;
    }
}