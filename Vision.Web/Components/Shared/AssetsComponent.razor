<BlazorForm IsInline="true" Class="mb-4">
    <FormLabel Class="my-1 mr-2">Kind</FormLabel>
    <select onchange="@(async(e) => await FilterAsync(e))" class="my-1 mr-sm-2 form-control">
        <option>Any...</option>
        @foreach (var kind in AppHelper.DependencyKinds)
        {
            <option value="@kind">@kind.GetName()</option>
        }
    </select>
</BlazorForm>

<BlazorTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
    <thead>
        <tr>
            <th>@nameof(AssetDto.Kind)</th>
            <th>@nameof(AssetDto.Asset)</th>
            <th>@nameof(AssetDto.Repository)</th>
            <th>@nameof(AssetDto.Dependencies)</th>
        </tr>
    </thead>
    <tbody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td class="@item.Kind.GetIconClass()">
                        @SvgService.GetSvg(item.Kind)
                    </td>
                    <td>
                        <a href="@($"/data/vcs/{item.VersionControlId}/repositories/{item.RepositoryId}/assets/{item.AssetId}")">@item.Asset</a>
                    </td>
                    <td>
                        <a href="@($"/data/vcs/{item.VersionControlId}/repositories/{item.RepositoryId}")">@item.Repository</a>
                    </td>
                    <td>@item.Dependencies</td>
                </tr>
            }

            @if (Items.Count == 0)
            {
                <tr>
                    <td colspan="3">
                        No assets found.
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3">
                    <LoaderComponent></LoaderComponent>
                </td>
            </tr>
        }
    </tbody>
</BlazorTable>

<PagerComponent Pager="Items" Page="@(async(p) => await PageAsync(p))"></PagerComponent>

@functions
{
    [Parameter] Guid? RepositoryId { get; set; }
    [Parameter] Guid? VersionControlId { get; set; }
    [Parameter] Guid? DependencyId { get; set; }
    [Parameter] Guid? VersionId { get; set; }
    [Parameter] Guid? FrameworkId { get; set; }
    [Parameter] bool Dependents { get; set; }

    [Inject] IAssetService AssetService { get; set; }
    [Inject] SvgService SvgService { get; set; }

    IPaginatedList<AssetDto> Items { get; set; }

    DependencyKind? Kind { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await PageAsync(1);
    }

    async Task FilterAsync(UIChangeEventArgs args)
    {
        if (Enum.TryParse(typeof(DependencyKind), (string)args.Value, true, out var kind))
        {
            Kind = (DependencyKind)kind;
        }
        else
        {
            Kind = null;
        }        

        await PageAsync(Items.PageIndex);
    }

    async Task PageAsync(int page)
    {
        if (Dependents && RepositoryId.HasValue)
        {
            Items = await AssetService.GetDependentsByRepositoryId(RepositoryId.Value, page);
        }
        else if (RepositoryId.HasValue)
        {
            Items = await AssetService.GetByRepositoryIdAsync(RepositoryId.Value, page);
        }
        else if (VersionControlId.HasValue)
        {
            Items = await AssetService.GetByVersionControlIdAsync(VersionControlId.Value, page);
        }
        else if (DependencyId.HasValue)
        {
            Items = await AssetService.GetByDependencyIdAsync(DependencyId.Value, page);
        }
        else if (VersionId.HasValue)
        {
            Items = await AssetService.GetByVersionIdAsync(VersionId.Value, page);
        }
        else if (FrameworkId.HasValue)
        {
            Items = await AssetService.GetByFrameworkIdAsync(FrameworkId.Value, page);
        }
        else
        {
            Items = await AssetService.GetAsync(page, kind: Kind);
        }

        StateHasChanged();
    }
}
