@inherits LayoutComponentBase
@inject SvgHelper SvgHelper
@inject IJSRuntime Runtime
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignalR

<div id="wrapper">
    <MenuComponent></MenuComponent>
    <div id="content-wrapper" class="d-flex flex-column">
        <div id="content">
            <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
                <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                    <i class="fa fa-bars"></i>
                </button>
                <form class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
                    <div class="input-group">
                        <input type="text" class="form-control bg-light border-0 small" placeholder="Search for..." aria-label="Search" aria-describedby="basic-addon2">
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="button">
                                <i class="fas fa-search fa-sm"></i>
                            </button>
                        </div>
                    </div>
                </form>
            </nav>
            <div class="container-fluid">
                @foreach(var alert in alerts.ToList())
                {
                    alerts.Remove(alert);

                    <div class="alert alert-@alert.Kind.GetMetricColour() alert-dismissible fade show" role="alert">
                        @alert.Message
                         <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                         </button>
                    </div>
                }

                @Body
            </div>
        </div>
        <FooterComponent></FooterComponent>
    </div>
</div>

<a class="scroll-to-top rounded" href="">
    <i class="fas fa-angle-up"></i>
</a>

<LogoutComponent></LogoutComponent>

@functions
{
    private IList<AlertDto> alerts = new List<AlertDto>();
    private HubConnection connection;

    protected async override Task OnInitAsync()
    {
        await SvgHelper.LoadIconsAsync();

        connection = new HubConnectionBuilder().WithUrlBlazor("/notificationhub", Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets).Build();

        connection.KeepAliveInterval = TimeSpan.FromSeconds(1);

        this.connection.On<AlertDto>("Send", (alert) =>
        {
            alerts.Add(alert);
            StateHasChanged();
        });

        connection.Closed += async (error) =>
        {
            await Task.Delay(new Random().Next(0,5) * 1000);
            await connection.StartAsync();
        };

        Task.WaitAll(this.connection.StartAsync());

        Console.WriteLine("Connected");
    }
}