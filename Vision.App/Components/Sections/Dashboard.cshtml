@page "/"
@page "/dashboard"
@inject HttpClient HttpClient

<BreadcrumbsComponent>
    <li class="breadcrumb-item active">Dashboard</li>
</BreadcrumbsComponent>

@if (Items != null)
{
    <div class="row mb-4">Summary</div>
    <div class="row mb-4">
        @foreach (var item in Items.Where(k => !k.DependencyKind.HasValue))
        {
            <div class="col-xl-3 col-md-6 mb-4">
                <MetricCardComponent Item="item"></MetricCardComponent>
            </div>
        }
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="row mb-4">Assets</div>
            <div class="row mb-4">
                @foreach (var item in Items.Where(k => k.CategoryKind == MetricCategoryKind.Assets))
                {
                    <div class="col-xl-3 col-md-6 mb-4">
                        <MetricCardComponent Item="item"></MetricCardComponent>
                    </div>
                }
            </div>
        </div>    
        <div class="col-md-6">
            <div class="row mb-4">Dependencies</div>
            <div class="row mb-4">                
                @foreach (var item in Items.Where(k => k.CategoryKind == MetricCategoryKind.Dependencies))
                {
                    <div class="col-xl-3 col-md-6 mb-4">
                        <MetricCardComponent Item="item"></MetricCardComponent>
                    </div>
                }
            </div>
        </div>
    </div>
}

@functions
{
    private IEnumerable<MetricItem> Items { get ; set; }

    protected async override Task OnInitAsync()
    {
        string json = await HttpClient.GetStringAsync("/api/dashboard/metrics/counts");
        Items = JsonConvert.DeserializeObject<MetricItem[]>(json);
    }
}