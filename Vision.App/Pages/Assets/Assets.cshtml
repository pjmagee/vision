@page "/assets"
@inject HttpClient HttpClient
@inject IJSRuntime Runtime

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page">Assets</li>
    </ol>
</nav>

<HeadingComponent Title="Assets"></HeadingComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Search</h6>
    </div>
    <div class="card-body">
        <form>
            <div class="form-group">
                <input type="text" class="form-control" bind="AssetSearch.Name" placeholder="Name" />
            </div>
            <div class="form-group">
                <select multiple data-role="tagsinput" bind="AssetSearch.GitSourcIds" name="gitServers">
                    <!-- GIT SERVERS -->
                </select>
            </div>            
            <div class="form-group">
                <select multiple data-role="tagsinput" bind="AssetSearch.DependencyIds" name="dependencies">
                    <!-- DEPENDENCY IDS -->
                </select>
            </div>
            <div class="form-group">

            </div>
            <button onclick="Search" class="btn btn-primary">Save</button>
        </form>
    </div>
</div>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Dependencies</h6>
    </div>
    <div class="card-body">
        @if (Items != null)
        {
            <table class="table table-striped table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <th>Repository</th>
                        <th>Asset</th>
                        <th>Dependencies</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Items)
                    {
                    <tr>
                        <td>@item.Repository</td>
                        <td>@item.Path</td>
                        <td>@item.Dependencies</td>
                        <td>
                            
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</div>
@functions {

    private AssetDto[] Items { get; set; }

    private AssetSearch AssetSearch = new AssetSearch();

    public async Task SearchAsync()
    {
        Items = await HttpClient.PostJsonAsync<AssetSearch>("/api/assets/search", AssetSearch);
    }

    protected override async Task OnAfterRenderAsync()
    {
        await Runtime.InvokeAsync<object>("dataTable");
        await Runtime.InvokeAsync<object>("assetSearch");
    }
}
