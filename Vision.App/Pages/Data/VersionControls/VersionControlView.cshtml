@page "/data/vcs/{VersionControlId:guid}"

@inject HttpClient HttpClient
@inject IJSRuntime Runtime

<BreadcrumbsComponent>
    <li class="breadcrumb-item">Data</li>
    <li class="breadcrumb-item"><NavLink href="/vcs">Version control systems</NavLink></li>
    <li class="breadcrumb-item active" aria-current="page">@VersionControl?.Endpoint</li>
</BreadcrumbsComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Repositories</h6>
    </div>
    <div class="card-body">
        @if (Repositories != null)
        {
            <RepositoriesComponent Items="Repositories"></RepositoriesComponent>
        }
        else
        {
            <LoaderComponent></LoaderComponent>
        }
    </div>
</div>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Assets</h6>
    </div>
    <div class="card-body">
        @if (Assets != null)
        {
            <AssetsComponent Items="Assets"></AssetsComponent>
        }
        else
        {
            <LoaderComponent></LoaderComponent>
        }
    </div>
</div>

@functions
{
    [Parameter] private Guid VersionControlId { get; set; }

    private RepositoryDto[] Repositories { get; set; }

    private AssetDto[] Assets { get; set; }

    private VersionControlDto VersionControl { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        VersionControl = await HttpClient.GetJsonAsync<VersionControlDto>($"/api/versioncontrols/{VersionControlId}");
        Repositories = await HttpClient.GetJsonAsync<RepositoryDto[]>($"/api/versioncontrols/{VersionControlId}/repositories");
        Assets = await HttpClient.GetJsonAsync<AssetDto[]>($"/api/versioncontrols/{VersionControlId}/assets");
    }
}
