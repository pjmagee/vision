@page "/data/assets/{AssetId:guid}"

@inject HttpClient HttpClient
@inject IJSRuntime Runtime

<BreadcrumbsComponent>
    <li class="breadcrumb-item">Data</li>
    <li class="breadcrumb-item"><NavLink href="/assets">Assets</NavLink></li>
    <li class="breadcrumb-item active">@Item?.Asset</li>
</BreadcrumbsComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Dependencies</h6>
    </div>
    <div class="card-body">
        @if (Dependencies != null)
        {
            <AssetDependenciesComponent Items="Dependencies"></AssetDependenciesComponent>
        }
        else
        {
            <LoaderComponent></LoaderComponent>
        }
    </div>
</div>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Frameworks</h6>
    </div>
    <div class="card-body">
        @if (Frameworks != null)
        {
            <FrameworksComponent Items="Frameworks"></FrameworksComponent>
        }
        else
        {
            <LoaderComponent></LoaderComponent>
        }
    </div>
</div>


@functions
{
    [Parameter] private Guid AssetId { get; set; }

    private AssetDependencyDto[] Dependencies { get; set; }
    private FrameworkDto[] Frameworks { get; set; }
    private AssetDto Item { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Item = await HttpClient.GetJsonAsync<AssetDto>($"/api/assets/{AssetId}");
        Dependencies = await HttpClient.GetJsonAsync<AssetDependencyDto[]>($"/api/assets/{AssetId}/dependencies");
        Frameworks = await HttpClient.GetJsonAsync<FrameworkDto[]>($"/api/assets/{AssetId}/frameworks");
    }

    protected override async Task OnAfterRenderAsync()
    {
        await Runtime.InvokeAsync<object>("dataTable");
    }
}
