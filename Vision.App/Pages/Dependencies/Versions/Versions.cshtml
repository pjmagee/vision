@page "/dependencies/{dependencyId:guid}/versions"
@inject HttpClient HttpClient
@inject IJSRuntime Runtime

<HeadingComponent Title="@Title"></HeadingComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Versions</h6>
    </div>
    <div class="card-body">
        @if (Items != null)
        {
            <table class="table table-striped table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <th>Version</th>
                        <th>Latest</th>
                        <th>Vulnerable</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Items)
                    {
                        <tr>
                            <td>@item.Version</td>
                            <td>@item.IsLatest</td>
                            <td>@item.IsVulnerable</td>
                            <td>
                                <NavLink class="nav-link" href="@($"/dependencies/{item.DependencyId}/versions")" Match="NavLinkMatch.All">Browse versions</NavLink>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</div>
@functions {

    private DependencyVersionDto[] Items { get; set; }
    private DependencyDto Dependency { get; set; }

    [Parameter] private Guid dependencyId { get; set; }

    public string Title { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Dependency = await HttpClient.GetJsonAsync<DependencyDto>($"/api/dependencies/{dependencyId}");
        Items = await HttpClient.GetJsonAsync<DependencyVersionDto[]>($"/api/dependencies/{dependencyId}/versions");
        Title = Dependency.Name + " versions";
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync()
    {
        await Runtime.InvokeAsync<object>("dataTable");
    }
}
