@page "/sources/{sourceId:guid}/repositories/{repositoryId:guid}"
@inject HttpClient HttpClient

<HeadingComponent Title="Assets"></HeadingComponent>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Assets</h6>
    </div>
    <div class="card-body">
        @if (Items != null)
        {
            <table class="table table-striped table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <th>Path</th>
                        <th>Dependencies</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Items)
                    {
                        <tr>
                            <td>@item.Path</td>
                            <td>@item.Dependencies</td>
                            <td>
                                <NavLink class="nav-link" href="@($"/sources/{sourceId}/repositories/{repositoryId}/assets/{item.AssetId}")" Match="NavLinkMatch.All">Browse dependencies</NavLink>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</div>

@functions {

    [Parameter] private Guid repositoryId { get; set; }
    [Parameter] private Guid sourceId { get; set; }

    private AssetDto[] Items { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Items = await HttpClient.GetJsonAsync<AssetDto[]>($"/api/assets/{repositoryId}");
    }

    protected override async Task OnAfterRenderAsync()
    {
        await JSRuntime.Current.InvokeAsync<object>("dataTable");
    }
}
