@inject List<NavMenuItem> NavMenuItems
@inject IUriHelper Helper
@inject IJSRuntime Runtime

<ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

    <a class="sidebar-brand d-flex align-items-center justify-content-center" href="/">
        <div class="sidebar-brand-icon rotate-n-15">
            <i class="fas fa-eye"></i>
        </div>
        <div class="sidebar-brand-text mx-3">Vision</div>
    </a>

    <hr class="sidebar-divider my-0">

    @{ 
        var dashboard = NavMenuItems.Find(mu => mu.Name == "Dashboard");
    }

    <li class="nav-item @ActiveClass(dashboard)">
        <NavLink class="nav-link" href="/"  onclick="@(() => Select(dashboard))">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span>Dashboard</span>
        </NavLink>
    </li>

    <hr class="sidebar-divider">
    <div class="sidebar-heading">Data sources</div>

    @foreach (var item in NavMenuItems.Where(x => x.Type == NavMenuItemType.Datasource))
    {
        var selected = item;

        <li class="nav-item @ActiveClass(item)">
            <NavLink class="nav-link" href="@item.Route" Match="@item.Match" onclick="@(() => Select(selected))">
                <i class="@item.Icon"></i>
                <span>@item.Name</span>
            </NavLink>
        </li>
    }

    <hr class="sidebar-divider">
    <div class="sidebar-heading">Data</div>

    @foreach (var item in NavMenuItems.Where(x => x.Type == NavMenuItemType.Data))
    {
         var selected = item;

        <li class="nav-item @ActiveClass(item)">
            <NavLink class="nav-link" href="@item.Route" Match="@item.Match"  onclick="@(() => Select(selected))">
                <i class="@item.Icon"></i>
                <span>@item.Name</span>
            </NavLink>
        </li>
    }

    <hr class="sidebar-divider d-none d-md-block">

    <div class="text-center d-none d-md-inline">
        <button class="rounded-circle border-0" id="sidebarToggle"></button>
    </div>
</ul>

@functions 
{
    private string ActiveClass(NavMenuItem item) => item.IsActive ? " active" : string.Empty;

    protected override void OnInit()
    {
        Helper.OnLocationChanged += (sender, o) =>
        {
            this.StateHasChanged();
        };
    }

    private void Select(NavMenuItem item)
    {
        NavMenuItems.ForEach(x => x.IsActive = false);
        item.IsActive = true;
    }

    protected override async Task OnAfterRenderAsync()
    {
        await Runtime.InvokeAsync<object>("register");
    }
}

