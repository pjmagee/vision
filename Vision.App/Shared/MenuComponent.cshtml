@inject IEnumerable<NavMenuItem> NavMenuItems
@inject IUriHelper helper

<ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

    <a class="sidebar-brand d-flex align-items-center justify-content-center" href="/">
        <div class="sidebar-brand-icon rotate-n-15">
            <i class="fas fa-wifi"></i>
        </div>
        <div class="sidebar-brand-text mx-3">VisioN</div>
    </a>

    <hr class="sidebar-divider my-0">

    <li class="nav-item @ActiveClass("/")">
        <NavLink class="nav-link" href="/">
            <i class="fas fa-fw fa-table"></i>
            <span>Dashboard</span>
        </NavLink>
    </li>

    <hr class="sidebar-divider">
    <div class="sidebar-heading">Data sources</div>

    @foreach (var item in NavMenuItems.Where(x => x.Type == NavMenuItemType.Datasource))
    {
        <li class="nav-item @ActiveClass(item.Route)">
            <NavLink class="nav-link" href="@item.Route" Match="@item.Match">
                <i class="@item.Icon"></i>
                <span>@item.Name</span>
            </NavLink>
        </li>
    }

    <hr class="sidebar-divider">
    <div class="sidebar-heading">Data</div>

    @foreach (var item in NavMenuItems.Where(x => x.Type == NavMenuItemType.Data))
    {
        <li class="nav-item @ActiveClass(item.Route)">
            <NavLink class="nav-link" href="@item.Route" Match="@item.Match">
                <i class="@item.Icon"></i>
                <span>@item.Name</span>
            </NavLink>
        </li>
    }

    <hr class="sidebar-divider d-none d-md-block">

    <div class="text-center d-none d-md-inline">
        <button class="rounded-circle border-0" id="sidebarToggle"></button>
    </div>
</ul>

@functions { 

    public string ActiveClass(string route)
    {
        if (helper.GetAbsoluteUri() .Contains(route)) return "active";
        return string.Empty;
    }

    protected override void OnInit()
    {
        helper.OnLocationChanged += (sender, o) => this.StateHasChanged();
    }
}

